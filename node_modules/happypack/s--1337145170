'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

var _mobx = require('mobx');

var _agent = require('../common/agent');

var _agent2 = _interopRequireDefault(_agent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

var UserStore = (_class = function UserStore() {
    _classCallCheck(this, UserStore);

    _initDefineProp(this, 'loginTag', _descriptor, this);

    _initDefineProp(this, 'username', _descriptor2, this);

    _initDefineProp(this, 'nickname', _descriptor3, this);

    _initDefineProp(this, 'loginTip', _descriptor4, this);

    _initDefineProp(this, 'doLogin', _descriptor5, this);

    _initDefineProp(this, 'doLogout', _descriptor6, this);
}

//登陆


//登出
, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'loginTag', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return false;
    }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'username', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return '';
    }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'nickname', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return '';
    }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'loginTip', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return '';
    }
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, 'doLogin', [_mobx.action], {
    enumerable: true,
    initializer: function initializer() {
        return function (data) {
            console.log("action:", _agent2.default);

            var loginRequest = _agent2.default.login;
            // loginRequest(data)
            // .then(res => {
            //     if(res && res.status === 0) {
            //         action("loginSuccess", () => {
            //             const { username, nickname } = res.data;

            //             this.username = username,
            //             this.nickname = nickname,
            //             this.loginTag = true; 
            //             this.loginTip = '';  
            //         })               
            //     } else {
            //         throw Error("error");
            //     }
            // })
            // .catch(err => {
            //     action("loginError", () => {
            //         this.loginTip = "账号或者密码错误";
            //     })
            // })
        };
    }
}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, 'doLogout', [_mobx.action], {
    enumerable: true,
    initializer: function initializer() {
        var _this = this;

        return function () {
            var logoutRequest = _agent2.default.logout;

            logoutRequest().then(function (res) {
                if (res && res.status === 0) {
                    (0, _mobx.action)("logoutSuccess", function () {
                        _this.loginTag = false;
                        _this.loginTip = '';
                    });
                } else {
                    throw Error("error");
                }
            }).catch(function (err) {
                (0, _mobx.action)("logoutError", function () {
                    _this.loginTip = "服务器错误，请稍后再试";
                });
            });
        };
    }
})), _class);


var userStore = new UserStore();

exports.default = userStore;