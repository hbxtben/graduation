'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

var _form = require('antd/lib/form');

var _form2 = _interopRequireDefault(_form);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _mobxReact = require('mobx-react');

require('./index.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FormItem = _form2.default.Item;
var TextArea = _input2.default.TextArea;


var formItemLayout = {
    labelCol: {
        xs: { span: 24 },
        sm: { span: 6 }
    },
    wrapperCol: {
        xs: { span: 24 },
        sm: { span: 16 }
    }
};

var OptionPick = (_dec = (0, _mobxReact.observer)(['detailStore']), _dec(_class = function (_Component) {
    _inherits(OptionPick, _Component);

    function OptionPick(props) {
        _classCallCheck(this, OptionPick);

        var _this = _possibleConstructorReturn(this, (OptionPick.__proto__ || Object.getPrototypeOf(OptionPick)).call(this, props));

        _this.handleSubmit = function (e) {
            e.preventDefault();

            var _this$props = _this.props,
                validateFields = _this$props.validateFields,
                onHandleRun = _this$props.onHandleRun,
                detailStore = _this$props.detailStore;
            var changeGraphOptions = detailStore.changeGraphOptions;


            _this.props.form.validateFields(function (err, values) {
                if (err) {
                    return;
                }

                changeGraphOptions({
                    title: _extends({
                        x: 'center'
                    }, values)
                });
                onHandleRun();
            });
        };

        return _this;
    }

    _createClass(OptionPick, [{
        key: 'render',
        value: function render() {
            var getFieldDecorator = this.props.form.getFieldDecorator;
            var options = this.props.detailStore.options;


            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                    _form2.default,
                    { onSubmit: this.handleSubmit },
                    _react2.default.createElement(
                        FormItem,
                        _extends({}, formItemLayout, {
                            label: 'text'
                        }),
                        getFieldDecorator('text', {
                            rules: [{
                                max: 20, message: '标题长度不要超过15个字符'
                            }, {
                                required: true, message: '请输入标题'
                            }],
                            initialValue: options.title.text
                        })(_react2.default.createElement(_input2.default, null))
                    ),
                    _react2.default.createElement(
                        FormItem,
                        _extends({}, formItemLayout, {
                            label: 'subtext'
                        }),
                        getFieldDecorator('subtext', {
                            rules: [{
                                max: 50, message: '描述不要超过50个字'
                            }],
                            initialValue: options.title.subtext
                        })(_react2.default.createElement(TextArea, null))
                    ),
                    _react2.default.createElement(
                        FormItem,
                        null,
                        _react2.default.createElement(
                            _button2.default,
                            { onClick: this.props.onHandleSave },
                            '\u4FDD\u5B58'
                        ),
                        _react2.default.createElement('span', { style: { marginRight: '8px' } }),
                        _react2.default.createElement(
                            _button2.default,
                            { type: 'primary', htmlType: 'submit' },
                            '\u8FD0\u884C'
                        )
                    )
                )
            );
        }
    }]);

    return OptionPick;
}(_react.Component)) || _class);


var OptionPickWithForm = _form2.default.create()(OptionPick);

exports.default = OptionPickWithForm;