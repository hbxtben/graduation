'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

var _mobx = require('mobx');

var _agent = require('../common/agent');

var _agent2 = _interopRequireDefault(_agent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

var UserStore = (_class = function UserStore() {
    _classCallCheck(this, UserStore);

    _initDefineProp(this, 'loginTag', _descriptor, this);

    _initDefineProp(this, 'username', _descriptor2, this);

    _initDefineProp(this, 'nickname', _descriptor3, this);

    _initDefineProp(this, 'loginTip', _descriptor4, this);

    _initDefineProp(this, 'doLogin', _descriptor5, this);

    _initDefineProp(this, 'doLogout', _descriptor6, this);

    _initDefineProp(this, 'doSign', _descriptor7, this);

    _initDefineProp(this, 'isLogin', _descriptor8, this);
}

//登陆


//登出


//注册
, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'loginTag', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return false;
    }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'username', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return '';
    }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'nickname', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return '';
    }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'loginTip', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return '';
    }
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, 'doLogin', [_mobx.action], {
    enumerable: true,
    initializer: function initializer() {
        var _this = this;

        return function (data) {
            var loginRequest = _agent2.default.login;
            loginRequest(data).then(function (res) {
                var resData = res.data;
                if (resData && resData.status === 0) {
                    var _resData$data = resData.data,
                        username = _resData$data.username,
                        nickname = _resData$data.nickname;


                    _this.username = username, _this.nickname = nickname, _this.loginTag = true;
                    _this.loginTip = '';
                } else {
                    throw Error("server error");
                }
            }).catch(function (err) {
                _this.loginTip = "账号或者密码错误";
            });
        };
    }
}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, 'doLogout', [_mobx.action], {
    enumerable: true,
    initializer: function initializer() {
        var _this2 = this;

        return function () {
            var logoutRequest = _agent2.default.logout;

            logoutRequest().then(function (res) {
                var resData = res.data;
                if (resData && resData.status === 0) {
                    _this2.loginTag = false;
                    _this2.loginTip = '';
                } else {
                    throw Error("server error");
                }
            }).catch(function (err) {
                _this2.loginTip = "服务器错误，请稍后再试";
            });
        };
    }
}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, 'doSign', [_mobx.action], {
    enumerable: true,
    initializer: function initializer() {
        var _this3 = this;

        return function (data) {
            var signinRequest = _agent2.default.signin;

            signinRequest(data).then(function (res) {
                var resData = res.data;
                if (resData && resData.status === 0) {
                    var _resData$data2 = resData.data,
                        username = _resData$data2.username,
                        nickname = _resData$data2.nickname;


                    _this3.username = username, _this3.nickname = nickname, _this3.loginTag = true;
                    _this3.loginTip = '';
                } else {
                    throw Error("server error");
                }
            }).catch(function (err) {
                _this3.loginTip = "服务器错误，请稍后再试";
            });
        };
    }
}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, 'isLogin', [_mobx.action], {
    enumerable: true,
    initializer: function initializer() {
        var _this4 = this;

        return function () {
            var isLoginRequest = _agent2.default.isLogin;

            isLoginRequest().then(function (res) {
                var resData = res.data;
                if (resData && resData.status === 0) {
                    var _resData$data3 = resData.data,
                        username = _resData$data3.username,
                        nickname = _resData$data3.nickname;


                    _this4.username = username, _this4.nickname = nickname, _this4.loginTag = true;
                    _this4.loginTip = '';
                } else {
                    throw Error("server error");
                }
            }).catch(function (err) {
                _this4.loginTip = "服务器错误，请稍后再试";
            });
        };
    }
})), _class);


var userStore = new UserStore();

exports.default = userStore;