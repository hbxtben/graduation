'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

var _mobx = require('mobx');

var _agent = require('../common/agent');

function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

var GraphStore = (_class = function GraphStore() {
    _classCallCheck(this, GraphStore);

    _initDefineProp(this, 'list', _descriptor, this);

    _initDefineProp(this, 'curPage', _descriptor2, this);

    _initDefineProp(this, 'pageLen', _descriptor3, this);

    _initDefineProp(this, 'errorTip', _descriptor4, this);

    _initDefineProp(this, 'changePage', _descriptor5, this);

    _initDefineProp(this, 'getList', _descriptor6, this);
}

// 分页跳页


//获取图标列表
, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'list', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return [];
    }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'curPage', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return 0;
    }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'pageLen', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return 0;
    }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'errorTip', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
        return '';
    }
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, 'changePage', [_mobx.action], {
    enumerable: true,
    initializer: function initializer() {
        var _this = this;

        return function (page) {
            _this.curPage = page; //分页组件中的数字大一
        };
    }
}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, 'getList', [_mobx.action], {
    enumerable: true,
    initializer: function initializer() {
        var _this2 = this;

        return function (data) {
            var getGraphList = _agent.graphRequest.getGraphList;

            getGraphList(data).then(function (res) {
                var resData = res.data;
                if (resData && resData.status === 0) {
                    var _resData$data = resData.data,
                        pageLen = _resData$data.pageLen,
                        list = _resData$data.list;


                    _this2.list = list;
                    _this2.pageLen = pageLen;
                } else {
                    throw Error("server error");
                }
            }).catch(function (err) {
                _this2.errorTip = "服务器错误，请稍后刷新页面";
            });
        };
    }
})), _class);


var graphStore = new GraphStore();
exports.default = graphStore;